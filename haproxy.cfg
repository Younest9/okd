# Global settings
#---------------------------------------------------------------------
global
    maxconn     20000
    log         /dev/log local0 info
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    log                     global
    mode                    http
    option                  httplog
    option                  dontlognull
    option http-server-close
    option redispatch
    option forwardfor       except 127.0.0.0/8
    retries                 3
    maxconn                 20000
    timeout http-request    10000ms
    timeout http-keep-alive 10000ms
    timeout check           10000ms
    timeout connect         40000ms
    timeout client          300000ms
    timeout server          300000ms
    timeout queue           50000ms

# Enable HAProxy stats
listen stats
    bind *:9000
    stats uri /stats
    stats refresh 10000ms
    mode            http
    log             global
    maxconn 10
    stats enable
    stats show-node
    stats show-desc Stats for okd cluster

# Kube API Server
frontend k8s_api_frontend
    bind *:6443
    default_backend k8s_api_backend
    mode tcp

backend k8s_api_backend
    mode tcp
    balance source
    server      bootstrap <ip_address_bootstrap>:6443 check
    server      cp-1 <ip_address_master_1>:6443 check
    server      cp-2 <ip_address_master_2>:6443 check
    server      cp-3 <ip_address_master_3>:6443 check

# OCP Machine Config Server
frontend okd_machine_config_server_frontend
    mode tcp
    bind *:22623
    default_backend okd_machine_config_server_backend

backend okd_machine_config_server_backend
    mode tcp
    balance source
    server      bootstrap <ip_address_bootstrap>:22623 check
    server      cp-1 <ip_address_master_1>:22623 check
    server      cp-2 <ip_address_master_2>:22623 check
    server      cp-3 <ip_address_master_3>:22623 check

# OKD Ingress - layer 4 tcp mode for each. Ingress Controller will handle layer 7.
frontend okd_http_ingress_frontend
    bind *:80
    default_backend okd_http_ingress_backend
    mode tcp

backend okd_http_ingress_backend
    balance source
    mode tcp
    server      cp-1 <ip_address_master_1>:80 check
    server      cp-2 <ip_address_master_2>:80 check
    server      cp-3 <ip_address_master_3>:80 check

frontend okd_https_ingress_frontend
    bind *:443
    default_backend okd_https_ingress_backend
    mode tcp

backend okd_https_ingress_backend
    mode tcp
    balance source
    server      cp-1 <ip_address_master_1>:443 check
    server      cp-2 <ip_address_master_2>:443 check
    server      cp-3 <ip_address_master_3>:443 check
